// Dependencies (Libraries)
require('dotenv').config({path: __dirname + '/.env'});
const Telegraf = require('telegraf'),
    Extra = require('telegraf/extra'),
    mongoose = require('mongoose'),
    Stage = require('telegraf/stage'),
    Scene = require('telegraf/scenes/base'),
    WizardScene = require('telegraf/scenes/wizard'),
    Markup = require('telegraf/markup'),
    {TelegrafMongoSession} = require('telegraf-session-mongodb'),
    DBHelper = require('./helpers/db_helper'),
    ViewHelper = require('./helpers/markup_helper'),
    LocalSession = require('telegraf-session-local');

// Initialization

bot = new Telegraf(process.env.USER_BOT_TOKEN);
mongoose.connect('mongodb://localhost/alati', {useUnifiedTopology: true, useNewUrlParser: true});
TelegrafMongoSession.setup(bot, 'mongodb://localhost/alati');
const localSession = new LocalSession({
    // Database name/path, where sessions will be located (default: 'sessions.json')
    database: 'localDB.json',
    // Name of session property object in Telegraf Context (default: 'session')
    property: 'session',
    // Type of lowdb storage (default: 'storageFileSync')
    storage: LocalSession.storageFileAsync,
    // Format of storage/database (default: JSON.stringify / JSON.parse)
    format: {
        serialize: (obj) => JSON.stringify(obj, null, 2), // null & 2 for pretty-formatted JSON
        deserialize: (str) => JSON.parse(str),
    },
    // We will use `messages` array in our database to store user messages using exported lowdb instance from LocalSession via Telegraf Context
    state: {messages: []}
});

bot.use(localSession.middleware());

// Scenes
const entranceScene = new Scene('entrance');
entranceScene.enter((ctx) => ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—Ö–æ–¥–∞', Extra.markup(markup => {
    return markup.keyboard(['–ó–∞–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ó–∞–π—Ç–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']).resize();
})));
entranceScene.hears(/–ó–∞–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/, ctx => {
    return ctx.scene.enter('admin');
});
entranceScene.hears(/–ó–∞–π—Ç–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/, ctx => {
    return ctx.scene.enter('user');
});

const adminScene = new Scene('admin');
adminScene.enter(ctx => ctx.reply('–ê–¥–º–∏–Ω—å –ø–∞–Ω–µ–ª—å', Extra.markup(markup => {
    return markup.keyboard(['üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ú–µ–Ω—é', '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']).resize();
})));
adminScene.command('start', ctx => ctx.scene.enter('entrance'));
adminScene.hears(/üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ú–µ–Ω—é/i, ctx => ctx.scene.enter('menuSetup'));
adminScene.hears(/‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/i, ctx => ctx.scene.enter('message'));
adminScene.hears(/üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/i, ctx => ctx.scene.enter('userSetup'));
adminScene.hears(/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/i, ctx => ctx.reply('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'));

const userScene = new Scene('user');
userScene.enter(ctx => ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name}`, Extra.markup(markup => {
    return markup.keyboard(['ü•ü –ú–µ–Ω—é', 'üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã', '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']).resize()
})));
userScene.hears(/ü•ü –ú–µ–Ω—é/i, ctx => ctx.scene.enter('menu'));
userScene.hears(/üõí –ö–æ—Ä–∑–∏–Ω–∞/i, ctx => ctx.scene.enter('cart'));
userScene.hears(/üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑/i, ctx => ctx.reply('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ'));
userScene.hears(/üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã/i, ctx => ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç—ã'));
userScene.hears(/‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤/i, ctx => ctx.reply('–û—Ç–∑—ã–≤'));
userScene.command('start', async (ctx) => {
    const vals = [];
    const users = await DBHelper.User.find({}, {_id: 0, __v: 0});
    users.forEach(item => vals.push(item.userID));
    if (vals.includes((ctx.from.id).toString())) {
        return ctx.scene.enter('entrance');
    }
});


const menuSetupScene = new Scene('menuSetup');
menuSetupScene.enter(async ctx => {
    const mealsView = await ViewHelper.getMeals();
    ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', Extra.markup(markup => {
        return markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'],
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ', '‚ûñ –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ'], ...mealsView]).resize();
    }))
});
menuSetupScene.hears(/‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ/i, ctx => ctx.scene.enter('addMeal'));
menuSetupScene.hears(/‚ûñ –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ/i, ctx => ctx.scene.enter('deleteMeal'));
menuSetupScene.hears(/‚¨ÖÔ∏è –ù–∞–∑–∞–¥/i, ctx => ctx.scene.enter('admin'));

const addMeal = new WizardScene('addMeal',
    (ctx) => {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª—é–¥–∞', Markup.removeKeyboard().extra());
        ctx['session'].meal = {};
        return ctx.wizard.next()
    },
    async (ctx) => {
        // const name = await DBHelper.getMeals();
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ —Å—É–º–º—É');
        ctx['session'].meal.name = ctx.message.text;
        return ctx.wizard.next();
    },
    (ctx) => {
        ctx.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        ctx['session'].meal.price = ctx.message.text;
        DBHelper.insertMeal(`${ctx['session'].meal.name}`, `${ctx['session'].meal.price}`);
        console.log(ctx['session'].meal);
        ctx['session'].meal = {};
        return ctx.scene.enter('admin');
    }
);

const deleteMeal = new WizardScene('deleteMeal',
    (ctx) => {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª—é–¥–∞', Markup.removeKeyboard().extra());
        return ctx.wizard.next()
    },
    (ctx) => {
        DBHelper.deleteMeal(`${ctx.message.text}`);
        ctx.reply('–£–¥–∞–ª–µ–Ω–æ');
        return ctx.scene.enter('admin');
    }
);

const messageScene = new Scene('message');
messageScene.enter(ctx => ctx.scene.enter('messageSetup'));

const messageSetup = new WizardScene('messageSetup',
    (ctx) => {
        ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ`, Markup.removeKeyboard().extra());
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.photo) {
            ctx['session'].message.photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è?');
            ctx.wizard.next();
        } else {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ');
            ctx.wizard.selectSetup(0);
        }
    }, async (ctx) => {
        const users = await DBHelper.getAllUsers();
        ctx['session'].message.caption = ctx.message.text;
        ctx.replyWithPhoto(ctx['session'].message.photo, {caption: ctx['session'].message.caption});
        ctx['session'].message = {};
        ctx.scene.enter('admin');
    });

const userSetupScene = new Scene('userSetup');
userSetupScene.enter(async ctx => {
    const users = await DBHelper.getAllAdminUsers();
    console.log(users);
    ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        Extra.markup(markup => markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'],
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'], ...users])));
});
userSetupScene.hears(/‚¨ÖÔ∏è –ù–∞–∑–∞–¥/i, ctx => ctx.scene.enter('admin'));
userSetupScene.hears(/‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/i, ctx => ctx.scene.enter('adminAdd'));
userSetupScene.hears(/‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/i, ctx => ctx.scene.enter('adminDelete'));

const adminAdd = new WizardScene('adminAdd',
    (ctx) => {
        ctx['session'].admin = {};
        ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, Markup.removeKeyboard().extra());
        return ctx.wizard.next();
    },
    (ctx) => {
        ctx['session'].admin.name = ctx.message.text;
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        ctx.wizard.next();
    }, (ctx) => {
        ctx['session'].admin.id = ctx.message.text;
        DBHelper.createAdmin(ctx['session'].admin.name, ctx['session'].admin.id);
        ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω');
        ctx.scene.enter('admin');
    });

const adminDelete = new WizardScene('adminDelete',
    (ctx) => {
        ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
        return ctx.wizard.next();
    },
    (ctx) => {
        DBHelper.deleteAdmin(ctx.message.text);
        ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω');
        ctx.scene.enter('admin');
    });

const menuScene = new Scene('menu');
menuScene.enter(async ctx => {
    const meals = await DBHelper.getMeals();
    const data = [];
    Object.keys(meals).forEach(meal => data.push([meal]));
    ctx.reply('–ú–µ–Ω—é', Extra.markup(markup => {
        return markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'], ...data]).resize();
    }))
});
menuScene.hears(/‚¨ÖÔ∏è –ù–∞–∑–∞–¥/i, ctx => ctx.scene.enter('user'));
menuScene.on('message', async ctx => {
        ctx['session'].currentMeal = {};
        const meals = await DBHelper.getMeals();
        const chosenMeal = ctx.message.text;
        if (Object.keys(meals).includes(chosenMeal)) {
            const meal = await DBHelper.getOneMeal(chosenMeal);
            ctx['session'].currentMeal.name = meal.name;
            ctx['session'].currentMeal.price = meal.price;
            return ctx.scene.enter('chooseQuantity');
        } else {
            return ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ —ç—Ç–æ–≥–æ –±–ª—é–¥–æ –Ω–µ—Ç –≤ –º–µ–Ω—é');
        }
    }
);

const chooseQuantity = new Scene('chooseQuantity');
chooseQuantity.enter(ctx => {
    return ctx.replyWithHTML(`<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ</b> –∏–ª–∏ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>`,
        Markup.keyboard([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).extra())
});
chooseQuantity.hears(/‚¨ÖÔ∏è –ù–∞–∑–∞–¥/i, ctx => ctx.scene.enter('menu'));
chooseQuantity.on('message', async ctx => {
    try {
        ctx['session'].currentMeal.quantity = parseInt(ctx.message.text);
        if (typeof (ctx['session'].currentMeal.quantity) === 'number') {
            const cart = await DBHelper.getCart(ctx.from.id.toString());
            if (cart) {
                const data = cart.meals;
                const names = [];
                data.forEach(item => names.push(item.name));
                if (names.includes(ctx['session'].currentMeal.name)) {
                    const index = data.findIndex(item => item.name === ctx['session'].currentMeal.name);
                    data[index] = {
                        "name": ctx['session'].currentMeal.name,
                        "price": ctx['session'].currentMeal.price,
                        "quantity": ctx['session'].currentMeal.quantity
                    };

                } else {
                    data.push({
                        "name": ctx['session'].currentMeal.name,
                        "price": ctx['session'].currentMeal.price,
                        "quantity": ctx['session'].currentMeal.quantity
                    });
                }
                let total = 0;
                let message = `<b>–ö–æ—Ä–∑–∏–Ω–∞:</b>\n\n`;
                data.forEach(item => {
                        total += item.price * item.quantity;
                        message += `<i>${item.name}</i> : ` + `${item.quantity} x ${item.price} = ${item.quantity * item.price}\n`;
                    }
                );
                message += `\n<b>–ò—Ç–æ–≥–æ</b>: ${total}`;
                ctx.replyWithHTML(message);
                await DBHelper.updateCart(ctx.from.id.toString(), data);
                return ctx.scene.enter('menu');
            } else {
                await DBHelper.saveToCart(ctx.from.id.toString(), [{
                    "name": ctx['session'].currentMeal.name,
                    "price": ctx['session'].currentMeal.price,
                    "quantity": ctx['session'].currentMeal.quantity
                }]);
                const total = ctx['session'].currentMeal.price * ctx['session'].currentMeal.quantity;
                const message = '<b>–ö–æ—Ä–∑–∏–Ω–∞:</b>' + '\n\n' + `${ctx['session'].currentMeal.name}\n` +
                    `${ctx['session'].currentMeal.quantity} x ${ctx['session'].currentMeal.price} = ${total}\n\n`
                    + `<b>–ò—Ç–æ–≥–æ:</b> ${total}`;
                ctx.replyWithHTML(message);
                return ctx.scene.enter('menu');
            }
        } else {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ü–∏—Ñ—Ä–∞—Ö');
            return ctx.scene.enter('menu');
        }
    } catch (e) {
        console.log(e);
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ü–∏—Ñ—Ä–∞—Ö');
        return ctx.scene.enter('menu');
    }
});

const cartScene = new Scene('cart');
cartScene.enter(async ctx => {
    const cart = await DBHelper.getCart(ctx.from.id);
    const data = [];
    if (cart) {
        cart.meals.forEach(meal => data.push([`‚ùå ${meal.name}`]));
        return ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞', Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üîÑ –û—á–∏—Å—Ç–∏—Ç—å'], ...data]).resize().extra());
    } else {
        ctx.scene.enter('user');
        return ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }
});
cartScene.hears(/‚¨ÖÔ∏è –ù–∞–∑–∞–¥/i, ctx => ctx.scene.enter('user'));
cartScene.hears(/üîÑ –û—á–∏—Å—Ç–∏—Ç—å/i, ctx => {
    DBHelper.clearCart(ctx.from.id);
    ctx.reply('–∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    return ctx.scene.enter('user');
});
cartScene.on('message', async ctx => {
    const vals = ctx.message.text.split('‚ùå');
    const meals = await DBHelper.getMeals();
    if (vals.length > 1 && Object.keys(meals).includes(vals[1].trim())) {
        const data = (await DBHelper.getCart(ctx.from.id.toString())).meals;
        const index = data.findIndex(item => item.name === vals[1].trim());
        data.splice(index, 1);
        await DBHelper.updateCart(ctx.from.id.toString(), data);
        let message = '';
        let total = 0;
        data.forEach(item => {
            total += item.price * item.quantity;
            message += `<b>–ö–æ—Ä–∑–∏–Ω–∞:</b>\n\n` +
                `${item.name}: ` + `${item.quantity} x ${item.price} = ${item.price * item.quantity}\n`
        });
        message += `\n<b>–ò—Ç–æ–≥–æ:</b> ${total}`;
        ctx.replyWithHTML(message);
        ctx.scene.enter('cart');
    } else {
        ctx.reply('–≠—Ç–æ–≥–æ –±–ª—é–¥–æ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }
});

//
// const orderScene = new Scene('order');
// orderScene.enter();
// orderScene.leave();
// orderScene.hears();
//
// const ratingScene = new Scene('rating');
// ratingScene.enter();
// ratingScene.leave();
// orderScene.hears();
//
//
//
//
// const statisticsScene = new Scene('statistics');
// statisticsScene.enter();
// statisticsScene.leave();
// statisticsScene.hears();


const stage = new Stage([entranceScene, adminScene, userScene, menuSetupScene, addMeal,
    deleteMeal, messageScene, messageSetup, userSetupScene, adminAdd, adminDelete, menuScene,
    chooseQuantity, cartScene]);
bot.use(stage.middleware());


// App Logic
bot.start(async (ctx) => {
    const vals = [];
    const users = await DBHelper.User.find({}, {_id: 0, __v: 0});
    users.forEach(item => vals.push(item.userID));
    ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${ctx.from.first_name}`);
    if (vals.includes((ctx.from.id).toString())) {
        ctx.scene.enter('entrance');
    }
    // USER PANEL
    else {
        ctx.scene.enter('user');
    }
});
// ADMIN BUSINESS LOGIC
// if (true) {
//     console.log('Inside Admin');
//     bot.hears(/ü•ü? ?–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ú–µ–Ω—é/i, async ctx => await ctx.reply('Yeak', Extra.markdown().markup(markup => {
//             return markup.keyboard(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ', '‚ûñ –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ']).resize();
//         }
//     )));
// }
// //USER BUSINESS LOGIC
// else {
//     console.log('Inside User');
//     bot.hears(/ü•ü? ?–ú–µ–Ω—é/, async ctx => await ctx.replyWithPhoto('https://telegra.ph/menu-12-19',
//         Extra.markup((m) => m.resize().keyboard(menu_markup.concat([['üîô –ù–∞–∑–∞–¥']])))
//     ));
// }


bot.startPolling();